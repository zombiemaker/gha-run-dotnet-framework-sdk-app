# GitHub Action Metadata file for defining the action
name: 'Run .NET Framework SDK Program'
description: 'Executes program operation within a Docker container. For projects using .NET Framework 4.8, 4.7.2, 4.7.1, 4.7, and 4.6.2.'
author: 'ZombieMaker'
inputs:
  dotnet-framework-version:
    description: '.NET Framework version'
    required: true
    default: '4.8'
  command:
    description: 'Single command and parameters'
    required: true
    default: ''
  working-directory:
    description: 'Directory where .NET solution or project files are located'
    required: true
    default: '${{ github.workspace }}'
runs:
  using: "composite"
  steps:
    - name: Check Action Runner current working directory
      run: write-host "Current working directory is $(pwd)"
      shell: pwsh
    # - name: Display command string
    #   run: |
    #     $commandString = @'
    #     ${{ inputs.command }}
    #     '@; `
    #     write-host "Command string = $commandString";
    #   shell: pwsh
    
    # Handling command strings that have either double or single quotes
    - name: Execute command using task container
      run: |
        # Option 1
        # Results in error if $inputs.command contains quotes
        # Import-Module ${{ github.action_path }}\scripts\gha-pshell-module.psm1; `
        # Invoke-ContainerizedDotnetSdkCommand -DotnetFrameworkVersion ${{ inputs.dotnet-framework-version }} -PowerShellHostWorkingDirectory "${{ inputs.working-directory }}" -CommandString ${{ inputs.command}}

        # Option 2
        # Results in error if $input.command contains single quotes
        # $inputString = '${{ inputs.command }}'; `
        # Import-Module ${{ github.action_path }}\scripts\gha-pshell-module.psm1; `
        # Invoke-ContainerizedDotnetSdkCommand -DotnetFrameworkVersion ${{ inputs.dotnet-framework-version }} -PowerShellHostWorkingDirectory "${{ inputs.working-directory }}" -CommandString $($inputString)
        
        # Option 3
        # Replacing quotes with backtick + quote the backtick is passed through
        # $inputString = '${{ inputs.command }}'; # Literal quotes will not work if string has single quotes `
        # $inputString = $inputString.Replace('"', '`"'); `
        # $inputString = $inputString.Replace("'", "`'"); # This will error because of single quotes `
        # write-host "inputString = $inputString"; `
        # Import-Module ${{ github.action_path }}\scripts\gha-pshell-module.psm1; `
        # Invoke-ContainerizedDotnetSdkCommand -DotnetFrameworkVersion ${{ inputs.dotnet-framework-version }} -PowerShellHostWorkingDirectory "${{ inputs.working-directory }}" -CommandString $($inputString)
        
        # Option 4
        # Use here string
        $inputHereString = @'
        ${{ inputs.command }}
        '@; `
        Import-Module ${{ github.action_path }}\scripts\gha-pshell-module.psm1; `
        Invoke-ContainerizedDotnetSdkCommand -DotnetFrameworkVersion ${{ inputs.dotnet-framework-version }} -PowerShellHostWorkingDirectory "${{ inputs.working-directory }}" -CommandString $inputHereString -IsHereString -Debug;
      shell: pwsh